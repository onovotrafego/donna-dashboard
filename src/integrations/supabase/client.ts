
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://aaigiukgvuwdqgjfhkyt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFhaWdpdWtndnV3ZHFnamZoa3l0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDExMDE2MDUsImV4cCI6MjA1NjY3NzYwNX0.jiZZg02zLw4nWEd6kxjUnl2aQfVflfOgDeHQQ2KYHn0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false,
    storage: localStorage
  }
});

// Add a debugging helper for queries with more detailed logging
export const debugSupabaseQuery = async (queryPromise, queryName) => {
  try {
    console.log(`[SUPABASE] Executing query: ${queryName}`);
    console.time(`Query ${queryName} execution time`);
    
    const response = await queryPromise;
    console.timeEnd(`Query ${queryName} execution time`);
    
    if (response.error) {
      console.error(`[SUPABASE] Error in query ${queryName}:`, response.error);
    } else {
      console.log(`[SUPABASE] Query ${queryName} successful:`, response.data);
      console.log(`[SUPABASE] Rows returned: ${Array.isArray(response.data) ? response.data.length : (response.data ? 1 : 0)}`);
    }
    
    return response;
  } catch (error) {
    console.error(`[SUPABASE] Exception in query ${queryName}:`, error);
    throw error;
  }
};

// New token-based session management
export const setAuthToken = (token: string, expiresIn = 86400) => {
  const expiresAt = new Date(Date.now() + expiresIn * 1000).toISOString();
  localStorage.setItem('auth_token', token);
  localStorage.setItem('auth_expires_at', expiresAt);
};

export const getAuthToken = () => {
  const token = localStorage.getItem('auth_token');
  const expiresAt = localStorage.getItem('auth_expires_at');
  
  if (!token || !expiresAt) return null;
  
  if (new Date(expiresAt) < new Date()) {
    // Token expired
    clearAuthToken();
    return null;
  }
  
  return token;
};

export const clearAuthToken = () => {
  localStorage.removeItem('auth_token');
  localStorage.removeItem('auth_expires_at');
  localStorage.removeItem('user_id');
  localStorage.removeItem('user_name');
};
