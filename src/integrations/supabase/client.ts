
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { logger, LogData } from '@/utils/security/secureLogger';
import { sanitizeForLogging } from '@/utils/security/loggerUtils';

const getObfuscatedId = (id: string | null | undefined): string => {
  if (!id) return 'unknown';
  if (id.length <= 8) return '***' + id.slice(-4);
  return id.slice(0, 4) + '...' + id.slice(-4);
};

const SUPABASE_URL = "https://aaigiukgvuwdqgjfhkyt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFhaWdpdWtndnV3ZHFnamZoa3l0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDExMDE2MDUsImV4cCI6MjA1NjY3NzYwNX0.jiZZg02zLw4nWEd6kxjUnl2aQfVflfOgDeHQQ2KYHn0";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false,
    storage: localStorage
  }
});

/**
 * Executa uma query no Supabase com logging aprimorado
 * @param queryPromise A promise da query a ser executada
 * @param queryName Nome identificador da query para logs
 * @returns O resultado da query
 */
export const debugSupabaseQuery = async <T,>(queryPromise: Promise<T>, queryName: string): Promise<T> => {
  const startTime = Date.now();
  const logContext: Omit<LogData, 'message'> = {
    tags: ['supabase', 'query'],
    query: queryName,
    timestamp: new Date().toISOString()
  };

  try {
    logger.debug(`Executando query: ${queryName}`, {
      ...logContext,
      message: `Executando query: ${queryName}`
    });
    
    // Get current user info for debugging (safely)
    const userId = localStorage.getItem('user_id');
    const { data: { user: supabaseUser } } = await supabase.auth.getUser();
    
    const obfuscatedUserId = getObfuscatedId(userId);
    const obfuscatedSupabaseId = getObfuscatedId(supabaseUser?.id);
    
    if (process.env.NODE_ENV === 'development') {
      logger.debug(`Query executada com IDs: Local=${obfuscatedUserId}, Supabase=${obfuscatedSupabaseId}`, {
        ...logContext,
        userId: obfuscatedUserId,
        supabaseUserId: obfuscatedSupabaseId,
        message: `Query executada com IDs: Local=${obfuscatedUserId}, Supabase=${obfuscatedSupabaseId}`
      });
    }
    
    const response = await queryPromise;
    const executionTime = Date.now() - startTime;
    
    if ((response as any)?.error) {
      const error = (response as any).error;
      const errorMessage = `Erro na query ${queryName}: ${error.message}`;
      
      logger.error(errorMessage, new Error(error.message), {
        ...logContext,
        error: {
          code: error.code,
          message: error.message,
          details: error.details,
          hint: error.hint
        },
        executionTime: `${executionTime}ms`,
        severity: 'error',
        message: errorMessage
      });
    } else if (process.env.NODE_ENV === 'development') {
      const data = (response as any)?.data;
      const rowCount = Array.isArray(data) ? data.length : (data ? 1 : 0);
      
      const successMessage = `Query ${queryName} concluída com sucesso`;
      logger.debug(successMessage, {
        ...logContext,
        executionTime: `${executionTime}ms`,
        rowCount,
        hasData: rowCount > 0,
        message: successMessage
      });
    }
    
    return response;
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Erro desconhecido';
    const errorObj = error instanceof Error ? error : new Error(errorMessage);
    logger.error(
      `Exceção na query ${queryName}: ${errorMessage}`,
      errorObj,
      {
        ...logContext,
        executionTime: `${Date.now() - startTime}ms`,
        severity: 'critical'
      }
    );
    
    throw error;
  }
};

// Direct access to auth session
export const getAuthUser = async () => {
  const { data } = await supabase.auth.getUser();
  return data?.user;
};

// Get current session
export const getAuthSession = async () => {
  const { data } = await supabase.auth.getSession();
  return data?.session;
};

// Token-based session management (legacy)
export const setAuthToken = (token: string, expiresIn = 86400) => {
  const expiresAt = new Date(Date.now() + expiresIn * 1000).toISOString();
  localStorage.setItem('auth_token', token);
  localStorage.setItem('auth_expires_at', expiresAt);
};

export const getAuthToken = () => {
  const token = localStorage.getItem('auth_token');
  const expiresAt = localStorage.getItem('auth_expires_at');
  
  if (!token || !expiresAt) return null;
  
  if (new Date(expiresAt) < new Date()) {
    // Token expired
    clearAuthToken();
    return null;
  }
  
  return token;
};

export const clearAuthToken = () => {
  localStorage.removeItem('auth_token');
  localStorage.removeItem('auth_expires_at');
  localStorage.removeItem('user_id');
  localStorage.removeItem('user_name');
};
